项目使用教程
1. 前提条件
在开始使用这个 FastAPI MongoDB 待办事项列表应用之前，确保你已经安装了以下内容：
熟悉 FastAPI 的基础知识。
已在系统中安装 Python。
安装并启动 MongoDB 社区服务器。

2. 安装依赖
首先，需要安装必要的依赖项。打开终端并运行以下命令：
pip install fastapi uvicorn pymongo pymongo[srv]

3. 配置数据库
创建一个名为 database.py 的文件，并添加以下代码：
from pymongo import MongoClient
client = MongoClient("mongodb://localhost:27017/mydb")
db = client.todo_app
collection_name = db["todos_app"]

4.创建 todos_* 文件
分别在 models、routes 和 schemas 文件夹中创建 todos_* 文件。

4.1创建models/todos_model.py文件并添加以下代码：
from pydantic import BaseModel

class Todo(BaseModel):
    name: str
    description: str
    completed: bool
    date: str
4.2创建routes/todos_route.py文件并添加以下代码：
from fastapi import APIRouter

from models.todos_model import Todo
from config.database import collection_name

from schemas.todos_schema import todos_serializer, todo_serializer
from bson import ObjectId

todo_api_router = APIRouter()

# 检索所有待办事项
@todo_api_router.get("/")
async def get_todos():
    todos = todos_serializer(collection_name.find())
    return todos

# 检索单个待办事项
@todo_api_router.get("/{id}")
async def get_todo(id: str):
    return todos_serializer(collection_name.find_one({"_id": ObjectId(id)}))

# 创建待办事项
@todo_api_router.post("/")
async def create_todo(todo: Todo):
    _id = collection_name.insert_one(dict(todo))
    return todos_serializer(collection_name.find({"_id": _id.inserted_id}))

# 更新待办事项
@todo_api_router.put("/{id}")
async def update_todo(id: str, todo: Todo):
    collection_name.find_one_and_update({"_id": ObjectId(id)}, {
        "$set": dict(todo)
    })
    return todos_serializer(collection_name.find({"_id": ObjectId(id)}))

# 删除待办事项
@todo_api_router.delete("/{id}")
async def delete_todo(id: str):
    collection_name.find_one_and_delete({"_id": ObjectId(id)})
    return {"status": "ok"}

4.3创建todos_schema.py文件并添加以下代码：
def todo_serializer(todo) -> dict:
    return {
        "id": str(todo["_id"]),
        "name": todo["name"],
        "description": todo["description"],
        "completed": todo["completed"],
        "date": todo["date"],
    }

def todos_serializer(todos) -> list:
    return [todo_serializer(todo) for todo in todos]

5.编辑 main.py 文件，添加以下代码：
from fastapi import FastAPI
from routes.todos_route import todo_api_router

app = FastAPI()

app.include_router(todo_api_router)

6. 运行应用程序
要启动 FastAPI 应用程序，在终端中运行以下命令：
uvicorn main:app --reload

7.测试 CRUD API，使用 Postman工具来测试 CRUD API 端点。
7.1 获取所有待办事项
打开Postman访问以下 URL：
http://127.0.0.1:8000/

7.2 获取单个待办事项
要获取单个待办事项，请将待办事项的 ID 追加到 URL 中：
http://127.0.0.1:8000/<todo_id>
将 <todo_id> 替换为实际的待办事项 ID。

7.3 创建新的待办事项
通过向以下 URL 发送 POST 请求，并在 JSON 正文中包含待办事项的详细信息来创建新的待办事项：
http://127.0.0.1:8000/
JSON 正文应具有以下结构：
{
    "name": "新的待办事项",
    "description": "这是一个新的待办事项",
    "completed": false,
    "date": "2024-01-01"
}
7.4 更新现有待办事项
要更新现有待办事项，向以下 URL 发送 PUT 请求，其中包含你要更新的待办事项的 ID，并在 JSON 正文中包含更新后的详细信息：
http://127.0.0.1:8000/<todo_id>
JSON 正文应与创建请求具有相同的结构，但包含更新后的值。

7.5 删除待办事项
要删除待办事项，请向以下 URL 发送 DELETE 请求，其中包含你要删除的待办事项的 ID：
http://127.0.0.1:8000/<todo_id>



